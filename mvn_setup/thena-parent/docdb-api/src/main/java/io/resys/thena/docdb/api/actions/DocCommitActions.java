package io.resys.thena.docdb.api.actions;

import java.util.List;

import javax.annotation.Nullable;

import org.immutables.value.Value;

import io.resys.thena.docdb.api.actions.CommitActions.CommitResultStatus;
import io.resys.thena.docdb.api.actions.CommitActions.JsonObjectMerge;
import io.resys.thena.docdb.api.models.Message;
import io.resys.thena.docdb.api.models.ThenaDocObject.Doc;
import io.resys.thena.docdb.api.models.ThenaDocObject.DocBranch;
import io.resys.thena.docdb.api.models.ThenaDocObject.DocCommit;
import io.resys.thena.docdb.api.models.ThenaEnvelope;
import io.smallrye.mutiny.Uni;
import io.vertx.core.json.JsonObject;

public interface DocCommitActions {
  CreateDoc createDoc();
  CreateDocBranch branchDoc();
  
  AppendDoc appendDoc();
  AppendDocBranch appendBranch();
  
  interface CreateDoc {
    CreateDoc repoId(String repoId);
    CreateDoc branchName(String branchName);           // first branch of the document, when empty generated as 'main' by the system 
    CreateDoc docId(@Nullable String docId);           // when empty generated by system
    CreateDoc externalId(@Nullable String externalId); // user given unique id
    CreateDoc docType(String docType);                 // user given classifier
    CreateDoc append(JsonObject doc);
    CreateDoc author(String author);
    CreateDoc message(String message);
    CreateDoc meta(@Nullable JsonObject docMeta);
    CreateDoc log(@Nullable JsonObject doc);
    Uni<AppendResultEnvelope> build();
  }
  
  interface AppendDoc {
    AppendDoc repoId(String repoId);
    AppendDoc docId(String docId);
    AppendDoc meta(@Nullable JsonObject docMeta);
    AppendDoc externalId(@Nullable String externalId); // user given unique id
    AppendDoc remove();                                // removes the document
    Uni<AppendResultEnvelope> build();
  }
  
  interface CreateDocBranch {
    CreateDocBranch repoId(String repoId);
    CreateDocBranch branchFrom(@Nullable String branchIdFromWhatToCreateABranch);  // document id for what to create a branch
    CreateDocBranch branchName(String branchName);              // must be provided by the user, new branch
    CreateDocBranch append(@Nullable JsonObject doc);           // when empty source branch content
    CreateDocBranch author(String author);
    CreateDocBranch message(String message);
    CreateDocBranch log(@Nullable JsonObject doc);
    Uni<AppendResultEnvelope> build();
  }
  
  interface AppendDocBranch {
    AppendDocBranch repoId(String repoId);
    AppendDocBranch branchId(String branchId);
    AppendDocBranch parent(String versionToModify);
    AppendDocBranch parentIsLatest();

    AppendDocBranch append(JsonObject doc);
    AppendDocBranch merge(JsonObjectMerge doc);
    AppendDocBranch log(JsonObject doc);
    AppendDocBranch remove(); // deletes the branch
    
    AppendDocBranch author(String author);
    AppendDocBranch message(String message);
    Uni<AppendResultEnvelope> build();
  }
  
  
  @Value.Immutable
  interface AppendResultEnvelope extends ThenaEnvelope {
    String getRepoId();
    @Nullable Doc getDoc();
    @Nullable DocBranch getBranch();
    @Nullable DocCommit getCommit();
    CommitResultStatus getStatus();
    List<Message> getMessages();
  }
}
