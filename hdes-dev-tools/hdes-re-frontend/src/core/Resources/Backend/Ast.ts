

declare namespace Ast {

  type NodeType = (
    "ROOT"|"ROOT_CONTENT"|
    "BODY_DT"|"BODY_SE"|"BODY_FL"|"BODY_EX"|"BODY_EMPTY"|"BODY_ID"|
    
    "TYPES"|"TYPE_LITERAL"|"TYPE_OBJECT"|"TYPE_SCALAR"|
    
    "INVOCATION_NAMED_PLACEHOLDER"|"INVOCATION_EMPTY_PLACEHOLDER"|
    "INVOCATION_SIMPLE"|"INVOCATION_NESTED"|
    "INVOCATION_SORTBY"|"INVOCATION_SORTBY_DEF"|
    
    "MAPPING_OBJECT"|"MAPPING_FIELD"|"MAPPING_EXP"|"MAPPING_ARRAY"|"MAPPING_FAST"|
    
    "SE_COMMAND"|"SE_PROMISE"|
    
    "FLOW_STEP"|"FLOW_STEP_AS"|
    "FLOW_STEP_CALL_DEF"|"FLOW_CALL_DEF"|
    "FLOW_ACTION_EMPTY"|"FLOW_ACTION_CALL"|"FLOW_ACTION_ITERATE"|
    "FLOW_POINTER_SPLIT"|"FLOW_POINTER_WHEN"|"FLOW_POINTER_THEN"|"FLOW_POINTER_END"|"FLOW_POINTER_ITERATE_END"|
    
    "DT_HITPOLICY_FIRST"|"DT_HITPOLICY_ALL"|
    "DT_RULE_WHEN_THEN"|"DT_RULE_WHEN"|"DT_RULE_THEN"|
    "DT_HITPOLICY_MAPPING"|"DT_RULE_MAPPING"|
    
    "EX_UNARY_NOT"|"EX_UNARY_NEGATE"|"EX_UNARY_POS"|
    "EX_EQUALITY"|"EX_CONDITIONAL"|"EX_BETWEEN"|
    "EX_IN"|"EX_AND"|"EX_OR"|
    "EX_ADDITIVE"|"EX_MULTIPLICATIVE"|
    "EX_INSTANCE_STATIC_METHOD"|"EX_INSTANCE_METHOD"|
    "EX_LAMBDA"|"EX_LAMBDA_SORT"|"EX_LAMBDA_FILTER"
  )

  interface ErrorNode {
    id: string;
    messages: {}[];
  }

  interface AstNode {
    nodeType: NodeType;
  }

  interface BodyNode extends AstNode {
  }
}

export default Ast;