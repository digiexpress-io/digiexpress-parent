---
token:
  text: "decisiontablebasic(firstName:STRINGlastName:STRING):{}{map(string)to(integer)when(_='bob',_='sam',_='viv')firstName(1,2,3)lastName(3,10,20)}<EOF>"
  start:
    line: 1
    col: 1
  end:
    line: 8
    col: 1
values:
- token:
    text: "basic(firstName:STRINGlastName:STRING):{}{map(string)to(integer)when(_='bob',_='sam',_='viv')firstName(1,2,3)lastName(3,10,20)}"
    start:
      line: 1
      col: 15
    end:
      line: 7
      col: 2
  id:
    token:
      text: "basic"
      start:
        line: 1
        col: 15
      end:
        line: 1
        col: 20
    value: "basic"
    nodeType: "BODY_ID"
  headers:
    token:
      text: "(firstName:STRINGlastName:STRING):{}"
      start:
        line: 1
        col: 20
      end:
        line: 1
        col: 59
    acceptDefs:
    - token:
        text: "firstName:STRING"
        start:
          line: 1
          col: 21
        end:
          line: 1
          col: 38
      required: true
      name: "firstName"
      array: false
      context: "ACCEPTS"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "STRING"
      nodeType: "TYPE_SCALAR"
    - token:
        text: "lastName:STRING"
        start:
          line: 1
          col: 39
        end:
          line: 1
          col: 55
      required: true
      name: "lastName"
      array: false
      context: "ACCEPTS"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "STRING"
      nodeType: "TYPE_SCALAR"
    returnDefs: []
    nodeType: "TYPES"
  hitPolicy:
    token:
      text: "map(string)to(integer)when(_='bob',_='sam',_='viv')firstName(1,2,3)lastName(3,10,20)"
      start:
        line: 2
        col: 3
      end:
        line: 6
        col: 22
    defFrom: "STRING"
    defTo: "INTEGER"
    when:
      token:
        text: "(_='bob',_='sam',_='viv')"
        start:
          line: 3
          col: 7
        end:
          line: 3
          col: 42
      values:
      - token:
          text: "_='bob'"
          start:
            line: 3
            col: 9
          end:
            line: 3
            col: 18
        id:
          token:
            text: "_='bob'"
            start:
              line: 3
              col: 9
            end:
              line: 3
              col: 18
          value: ""
          nodeType: "BODY_ID"
        headers:
          token:
            text: "_='bob'"
            start:
              line: 3
              col: 9
            end:
              line: 3
              col: 18
          acceptDefs: []
          returnDefs: []
          nodeType: "TYPES"
        src: "_ = 'bob'"
        value:
          token:
            text: "_='bob'"
            start:
              line: 3
              col: 9
            end:
              line: 3
              col: 18
          type: "EQUAL"
          left:
            token:
              text: "_"
              start:
                line: 3
                col: 9
              end:
                line: 3
                col: 10
            nodeType: "INVOCATION_EMPTY_PLACEHOLDER"
          right:
            token:
              text: "'bob'"
              start:
                line: 3
                col: 13
              end:
                line: 3
                col: 18
            type: "STRING"
            value: "bob"
            nodeType: "TYPE_LITERAL"
          nodeType: "EX_EQUALITY"
        nodeType: "BODY_EX"
      - token:
          text: "_='sam'"
          start:
            line: 3
            col: 20
          end:
            line: 3
            col: 29
        id:
          token:
            text: "_='sam'"
            start:
              line: 3
              col: 20
            end:
              line: 3
              col: 29
          value: ""
          nodeType: "BODY_ID"
        headers:
          token:
            text: "_='sam'"
            start:
              line: 3
              col: 20
            end:
              line: 3
              col: 29
          acceptDefs: []
          returnDefs: []
          nodeType: "TYPES"
        src: "_ = 'sam'"
        value:
          token:
            text: "_='sam'"
            start:
              line: 3
              col: 20
            end:
              line: 3
              col: 29
          type: "EQUAL"
          left:
            token:
              text: "_"
              start:
                line: 3
                col: 20
              end:
                line: 3
                col: 21
            nodeType: "INVOCATION_EMPTY_PLACEHOLDER"
          right:
            token:
              text: "'sam'"
              start:
                line: 3
                col: 24
              end:
                line: 3
                col: 29
            type: "STRING"
            value: "sam"
            nodeType: "TYPE_LITERAL"
          nodeType: "EX_EQUALITY"
        nodeType: "BODY_EX"
      - token:
          text: "_='viv'"
          start:
            line: 3
            col: 31
          end:
            line: 3
            col: 40
        id:
          token:
            text: "_='viv'"
            start:
              line: 3
              col: 31
            end:
              line: 3
              col: 40
          value: ""
          nodeType: "BODY_ID"
        headers:
          token:
            text: "_='viv'"
            start:
              line: 3
              col: 31
            end:
              line: 3
              col: 40
          acceptDefs: []
          returnDefs: []
          nodeType: "TYPES"
        src: "_ = 'viv'"
        value:
          token:
            text: "_='viv'"
            start:
              line: 3
              col: 31
            end:
              line: 3
              col: 40
          type: "EQUAL"
          left:
            token:
              text: "_"
              start:
                line: 3
                col: 31
              end:
                line: 3
                col: 32
            nodeType: "INVOCATION_EMPTY_PLACEHOLDER"
          right:
            token:
              text: "'viv'"
              start:
                line: 3
                col: 35
              end:
                line: 3
                col: 40
            type: "STRING"
            value: "viv"
            nodeType: "TYPE_LITERAL"
          nodeType: "EX_EQUALITY"
        nodeType: "BODY_EX"
      nodeType: "DT_RULE_WHEN"
    mapsTo:
    - token:
        text: "firstName(1,2,3)"
        start:
          line: 5
          col: 3
        end:
          line: 5
          col: 21
      accepts:
        token:
          text: "firstName"
          start:
            line: 5
            col: 3
          end:
            line: 5
            col: 12
        value: "firstName"
        nodeType: "INVOCATION_SIMPLE"
      then:
        token:
          text: "1,2,3"
          start:
            line: 5
            col: 13
          end:
            line: 5
            col: 20
        values:
        - token:
            text: "1"
            start:
              line: 5
              col: 13
            end:
              line: 5
              col: 14
          type: "INTEGER"
          value: "1"
          nodeType: "TYPE_LITERAL"
        - token:
            text: "2"
            start:
              line: 5
              col: 16
            end:
              line: 5
              col: 17
          type: "INTEGER"
          value: "2"
          nodeType: "TYPE_LITERAL"
        - token:
            text: "3"
            start:
              line: 5
              col: 19
            end:
              line: 5
              col: 20
          type: "INTEGER"
          value: "3"
          nodeType: "TYPE_LITERAL"
        nodeType: "DT_RULE_THEN"
      nodeType: "DT_RULE_MAPPING"
    - token:
        text: "lastName(3,10,20)"
        start:
          line: 6
          col: 3
        end:
          line: 6
          col: 22
      accepts:
        token:
          text: "lastName"
          start:
            line: 6
            col: 3
          end:
            line: 6
            col: 11
        value: "lastName"
        nodeType: "INVOCATION_SIMPLE"
      then:
        token:
          text: "3,10,20"
          start:
            line: 6
            col: 12
          end:
            line: 6
            col: 21
        values:
        - token:
            text: "3"
            start:
              line: 6
              col: 12
            end:
              line: 6
              col: 13
          type: "INTEGER"
          value: "3"
          nodeType: "TYPE_LITERAL"
        - token:
            text: "10"
            start:
              line: 6
              col: 15
            end:
              line: 6
              col: 17
          type: "INTEGER"
          value: "10"
          nodeType: "TYPE_LITERAL"
        - token:
            text: "20"
            start:
              line: 6
              col: 19
            end:
              line: 6
              col: 21
          type: "INTEGER"
          value: "20"
          nodeType: "TYPE_LITERAL"
        nodeType: "DT_RULE_THEN"
      nodeType: "DT_RULE_MAPPING"
    nodeType: "DT_HITPOLICY_MAPPING"
  constants:
    token:
      text: "(firstName:STRINGlastName:STRING):{}"
      start:
        line: 1
        col: 20
      end:
        line: 1
        col: 59
    required: true
    name: "constants"
    array: true
    context: "CONSTANTS"
    values:
    - token:
        text: "(firstName:STRINGlastName:STRING):{}"
        start:
          line: 1
          col: 20
        end:
          line: 1
          col: 59
      required: true
      name: ""
      array: true
      context: "CONSTANTS"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "INTEGER"
      nodeType: "TYPE_SCALAR"
    - token:
        text: "(firstName:STRINGlastName:STRING):{}"
        start:
          line: 1
          col: 20
        end:
          line: 1
          col: 59
      required: true
      name: "firstName"
      array: true
      context: "CONSTANTS"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "INTEGER"
      nodeType: "TYPE_SCALAR"
    - token:
        text: "(firstName:STRINGlastName:STRING):{}"
        start:
          line: 1
          col: 20
        end:
          line: 1
          col: 59
      required: true
      name: "lastName"
      array: true
      context: "CONSTANTS"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "INTEGER"
      nodeType: "TYPE_SCALAR"
    nodeType: "TYPE_OBJECT"
  matched:
    token:
      text: "(firstName:STRINGlastName:STRING):{}"
      start:
        line: 1
        col: 20
      end:
        line: 1
        col: 59
    required: true
    name: "instance"
    array: false
    context: "MATCHES"
    values:
    - token:
        text: "(firstName:STRINGlastName:STRING):{}"
        start:
          line: 1
          col: 20
        end:
          line: 1
          col: 59
      required: true
      name: "instance"
      array: true
      context: "MATCHES"
      values:
      - token:
          text: "(firstName:STRINGlastName:STRING):{}"
          start:
            line: 1
            col: 20
          end:
            line: 1
            col: 59
        required: true
        name: ""
        array: true
        context: "MATCHES"
        debugValue:
          empty: true
          present: false
        formula:
          empty: true
          present: false
        formulaOverAll:
          empty: true
          present: false
        type: "INTEGER"
        nodeType: "TYPE_SCALAR"
      nodeType: "TYPE_OBJECT"
    - token:
        text: "(firstName:STRINGlastName:STRING):{}"
        start:
          line: 1
          col: 20
        end:
          line: 1
          col: 59
      required: true
      name: "firstName"
      array: true
      context: "MATCHES"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "INTEGER"
      nodeType: "TYPE_SCALAR"
    - token:
        text: "(firstName:STRINGlastName:STRING):{}"
        start:
          line: 1
          col: 20
        end:
          line: 1
          col: 59
      required: true
      name: "lastName"
      array: true
      context: "MATCHES"
      debugValue:
        empty: true
        present: false
      formula:
        empty: true
        present: false
      formulaOverAll:
        empty: true
        present: false
      type: "INTEGER"
      nodeType: "TYPE_SCALAR"
    nodeType: "TYPE_OBJECT"
  nodeType: "BODY_DT"
nodeType: "ROOT_CONTENT"
