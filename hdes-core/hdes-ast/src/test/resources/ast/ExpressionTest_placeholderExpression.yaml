---
token:
  text: "expression{_>=20?30:40}expression{stepx._value1>=20?30:40}expression{_value1>=20?30:40}<EOF>"
  start:
    line: 1
    col: 1
  end:
    line: 4
    col: 1
values:
- token:
    text: "_>=20?30:40"
    start:
      line: 1
      col: 13
    end:
      line: 1
      col: 30
  id:
    token:
      text: "_>=20?30:40"
      start:
        line: 1
        col: 13
      end:
        line: 1
        col: 30
    value: ""
    nodeType: "BODY_ID"
  headers:
    token:
      text: "_>=20?30:40"
      start:
        line: 1
        col: 13
      end:
        line: 1
        col: 30
    acceptDefs: []
    returnDefs: []
    nodeType: "TYPES"
  src: "_ >= 20 ? 30 : 40"
  value:
    token:
      text: "_>=20?30:40"
      start:
        line: 1
        col: 13
      end:
        line: 1
        col: 30
    operation:
      token:
        text: "_>=20"
        start:
          line: 1
          col: 13
        end:
          line: 1
          col: 20
      type: "GREATER_THEN"
      left:
        token:
          text: "_"
          start:
            line: 1
            col: 13
          end:
            line: 1
            col: 14
        nodeType: "INVOCATION_EMPTY_PLACEHOLDER"
      right:
        token:
          text: "20"
          start:
            line: 1
            col: 18
          end:
            line: 1
            col: 20
        type: "INTEGER"
        value: "20"
        nodeType: "TYPE_LITERAL"
      nodeType: "EX_EQUALITY"
    left:
      token:
        text: "30"
        start:
          line: 1
          col: 23
        end:
          line: 1
          col: 25
      type: "INTEGER"
      value: "30"
      nodeType: "TYPE_LITERAL"
    right:
      token:
        text: "40"
        start:
          line: 1
          col: 28
        end:
          line: 1
          col: 30
      type: "INTEGER"
      value: "40"
      nodeType: "TYPE_LITERAL"
    nodeType: "EX_CONDITIONAL"
  nodeType: "BODY_EX"
- token:
    text: "stepx._value1>=20?30:40"
    start:
      line: 2
      col: 13
    end:
      line: 2
      col: 42
  id:
    token:
      text: "stepx._value1>=20?30:40"
      start:
        line: 2
        col: 13
      end:
        line: 2
        col: 42
    value: ""
    nodeType: "BODY_ID"
  headers:
    token:
      text: "stepx._value1>=20?30:40"
      start:
        line: 2
        col: 13
      end:
        line: 2
        col: 42
    acceptDefs: []
    returnDefs: []
    nodeType: "TYPES"
  src: "stepx._value1 >= 20 ? 30 : 40"
  value:
    token:
      text: "stepx._value1>=20?30:40"
      start:
        line: 2
        col: 13
      end:
        line: 2
        col: 42
    operation:
      token:
        text: "stepx._value1>=20"
        start:
          line: 2
          col: 13
        end:
          line: 2
          col: 32
      type: "GREATER_THEN"
      left:
        token:
          text: "stepx._value1"
          start:
            line: 2
            col: 13
          end:
            line: 2
            col: 26
        path:
          token:
            text: "stepx"
            start:
              line: 2
              col: 13
            end:
              line: 2
              col: 18
          value: "stepx"
          nodeType: "INVOCATION_SIMPLE"
        value:
          token:
            text: "_value1"
            start:
              line: 2
              col: 19
            end:
              line: 2
              col: 26
          value: "value1"
          nodeType: "INVOCATION_NAMED_PLACEHOLDER"
        nodeType: "INVOCATION_NESTED"
      right:
        token:
          text: "20"
          start:
            line: 2
            col: 30
          end:
            line: 2
            col: 32
        type: "INTEGER"
        value: "20"
        nodeType: "TYPE_LITERAL"
      nodeType: "EX_EQUALITY"
    left:
      token:
        text: "30"
        start:
          line: 2
          col: 35
        end:
          line: 2
          col: 37
      type: "INTEGER"
      value: "30"
      nodeType: "TYPE_LITERAL"
    right:
      token:
        text: "40"
        start:
          line: 2
          col: 40
        end:
          line: 2
          col: 42
      type: "INTEGER"
      value: "40"
      nodeType: "TYPE_LITERAL"
    nodeType: "EX_CONDITIONAL"
  nodeType: "BODY_EX"
- token:
    text: "_value1>=20?30:40"
    start:
      line: 3
      col: 13
    end:
      line: 3
      col: 36
  id:
    token:
      text: "_value1>=20?30:40"
      start:
        line: 3
        col: 13
      end:
        line: 3
        col: 36
    value: ""
    nodeType: "BODY_ID"
  headers:
    token:
      text: "_value1>=20?30:40"
      start:
        line: 3
        col: 13
      end:
        line: 3
        col: 36
    acceptDefs: []
    returnDefs: []
    nodeType: "TYPES"
  src: "_value1 >= 20 ? 30 : 40"
  value:
    token:
      text: "_value1>=20?30:40"
      start:
        line: 3
        col: 13
      end:
        line: 3
        col: 36
    operation:
      token:
        text: "_value1>=20"
        start:
          line: 3
          col: 13
        end:
          line: 3
          col: 26
      type: "GREATER_THEN"
      left:
        token:
          text: "_value1"
          start:
            line: 3
            col: 13
          end:
            line: 3
            col: 20
        value: "value1"
        nodeType: "INVOCATION_NAMED_PLACEHOLDER"
      right:
        token:
          text: "20"
          start:
            line: 3
            col: 24
          end:
            line: 3
            col: 26
        type: "INTEGER"
        value: "20"
        nodeType: "TYPE_LITERAL"
      nodeType: "EX_EQUALITY"
    left:
      token:
        text: "30"
        start:
          line: 3
          col: 29
        end:
          line: 3
          col: 31
      type: "INTEGER"
      value: "30"
      nodeType: "TYPE_LITERAL"
    right:
      token:
        text: "40"
        start:
          line: 3
          col: 34
        end:
          line: 3
          col: 36
      type: "INTEGER"
      value: "40"
      nodeType: "TYPE_LITERAL"
    nodeType: "EX_CONDITIONAL"
  nodeType: "BODY_EX"
nodeType: "ROOT_CONTENT"
