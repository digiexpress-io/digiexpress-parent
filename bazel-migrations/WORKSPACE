# This is where everything around bazel starts in our project.
# We will define all global bazel library imports in here.
# This file just defines, bazel libraries that we will use, from here you should see the BUILD file in the same directory.
#

# Root folder/project definition, optional, just informative
workspace(name = "digiexpress_with_bazel")

# Import built in `rule` called `http_archive` for downloading extra bazel `rules`
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Download java rules, this will add support for java/maven related build operations
# In bazel version 7 this is made a lot easier, via MODULE file.
RULES_JVM_EXTERNAL_TAG = "5.2"
RULES_JVM_EXTERNAL_SHA ="f86fd42a809e1871ca0aabe89db0d440451219c3ce46c58da240c7dcdc00125f"
http_archive(
    name = "rules_jvm_external",
    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
    sha256 = RULES_JVM_EXTERNAL_SHA,
    url = "https://github.com/bazelbuild/rules_jvm_external/releases/download/%s/rules_jvm_external-%s.tar.gz" % (RULES_JVM_EXTERNAL_TAG, RULES_JVM_EXTERNAL_TAG)
)
# Standard way of loading. This is part of setting up java support for, will download additional libraries and dependencies from maven
load("@rules_jvm_external//:repositories.bzl", "rules_jvm_external_deps")
rules_jvm_external_deps()
load("@rules_jvm_external//:setup.bzl", "rules_jvm_external_setup")
rules_jvm_external_setup()


# Download contrib java rules we will use this for junit5 support
CONTRIB_RULES_JVM_VERSION = "0.9.0"
CONTRIB_RULES_JVM_SHA = "548f0583192ff79c317789b03b882a7be9b1325eb5d3da5d7fdcc4b7ca69d543"
http_archive(
    name = "contrib_rules_jvm",
    sha256 = CONTRIB_RULES_JVM_SHA,
    strip_prefix = "rules_jvm-%s" % CONTRIB_RULES_JVM_VERSION,
    url = "https://github.com/bazel-contrib/rules_jvm/archive/refs/tags/v%s.tar.gz" % CONTRIB_RULES_JVM_VERSION,
)

# Standard way of loading. This is part of setting up java support, will download additional libraries and dependencies from maven
load("@contrib_rules_jvm//:repositories.bzl", "contrib_rules_jvm_deps")
contrib_rules_jvm_deps()
load("@contrib_rules_jvm//:setup.bzl", "contrib_rules_jvm_setup")
contrib_rules_jvm_setup()


# import maven_install rule, we will need this to download all the dependencies for our java projects
load("@rules_jvm_external//:defs.bzl", "maven_install")


# Setup maven dependencies.

# import a constant that defines all of our project dependencies
load("//tools/maven:maven_deps.bzl", "MAVEN_DEPS")
# This is the tricky part, on initial glance this is straight forward, big difference between maven is that we create a lock file.
# maven_install_json - (generated do not modify) this is our lock file, that defines every dependency we have, if it's not here then it does not exist.
# artifacts - this is the list of artifacts from what we generate the lock file.
# How to add a new dependency? add it into the constant list in file: `//:maven_deps.bzl`
# How to update the lock file? just run the following bazel command: `bazel run @unpinned_maven//:pin`
maven_install(
    maven_install_json = "//tools/maven:maven_install.json",
    artifacts = [] + MAVEN_DEPS,
    # dialob defines this dependency, but such dependency we exclude this and define the actual one:
    # "org.hibernate.validator:hibernate-validator:6.2.5.Final",
    excluded_artifacts = ["org.hibernate:hibernate-validator"],
    repositories = [
      "https://maven.google.com",
      "https://repo1.maven.org/maven2",
    ],
    version_conflict_policy = 'pinned',
    fetch_sources = True,
    strict_visibility = True,
    generate_compat_repositories = False,
)

# import rules for supporting dependency update commands
# this is the part of setup for having locked dependencies
load("@maven//:defs.bzl", "pinned_maven_install")
pinned_maven_install()