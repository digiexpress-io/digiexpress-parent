load("@aspect_rules_jest//jest:defs.bzl", "jest_test")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@npm//:eslint/package_json.bzl", eslint_bin = "bin")

ASSET_PATTERNS = [
    "src/**/*.svg",
    "src/**/*.css",
]

SRC_PATTERNS = [
  "src/**/*.tsx",
  "src/**/*.ts",
]



js_library(
    name = "src",
    srcs = glob(ASSET_PATTERNS),
    visibility = ["//visibility:public"],
    deps = [
        ":src_ts",
    ],
)

ts_project(
    name = "src_ts",
    srcs = glob(
        include = SRC_PATTERNS
    ),
    declaration = True,
    resolve_json_module = True,
    tsconfig = "//:tsconfig",
    deps = [
        "//:ts-parent/node_modules/react",
        "//:ts-parent/node_modules/react-dom",
        "//:ts-parent/node_modules/web-vitals",
    ],
)

eslint_bin.eslint_test(
    name = "eslint_test",
    args = ["{}/{}".format(
        package_name(),
        p,
    ) for p in SRC_PATTERNS],
    data = [
        "//:package_json",
        "//:ts-parent/node_modules/eslint-config-react-app",
    ] + glob(SRC_PATTERNS),
)















# Build the typescript project
ts_project(
    name = "home",
    srcs = glob([
        "src/**/*.tsx",
        "src/**/*.ts",
    ]),
    tsconfig = "//ts-parent:tsconfig.json",
    deps = [
        "//ts-parent/pkgs/common:lib",
        "@npm//@types/node",
        "@npm//@types/react",
        "@npm//@types/react-dom",
        "@npm//react",
        "@npm//react-dom",
    ],
)


# We don't want to teach react-scripts to include from multiple directories
# So we copy everything it wants to read to the output "bin" directory
copy_to_bin(
    name = "copy_static_files",
    srcs = glob(
        [
            "public/*",
            "src/**/*",
        ],
    ) + [
        "package.json",
        "tsconfig.json",
    ],
)

# react-scripts can only work if the working directory is the root of the application.
# So we'll need to chdir before it runs.
write_file(
    name = "write_chdir_script",
    out = "chdir.js",
    content = ["process.chdir(__dirname)"],
)

_RUNTIME_DEPS = [
    "chdir.js",
    "copy_static_files",
    "@npm//react",
    "@npm//react-dom",
]

react_scripts(
    name = "devserver",
    args = [
        "--node_options=--require=./$(rootpath chdir.js)",
        "start",
    ],
    data = _RUNTIME_DEPS + [
        "@npm//@types/react",
        "@npm//@types/react-dom",
        "//ts-parent/pkgs/common:lib",
    ],
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",

        # This tag starts the live_reload server inside iBazel and instructs it to send reload events to webbrowsers.
        "ibazel_live_reload",
    ],
)


webpack_dev_server(
    name = "devserver-2",
#    node_modules = '//ts-parent/node_modules',
    args = [
        "--entry",
        "./ts-parent/pkgs/app/src/index.js",
        "--config",
        "$(location webpack.config.js)",
        "--mode",
        "development",
#        "--env.path",
#        "./ts-parent",
    ],
    data = glob(["src/logos/*.svg"]) + [
        ":home",
        ":copy_static_files",
        ":webpack.config.js",
        "@npm//@svgr/webpack",
        "@npm//babel-loader",
        "@npm//css-loader",
        "@npm//style-loader",
        "@npm//url-loader",
    ],
        tags = [
            # This tag instructs ibazel to pipe into stdin a event describing actions.
            # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
            # So use this to prevent EOF.
            "ibazel_notify_changes",

            # This tag starts the live_reload server inside iBazel and instructs it to send reload events to webbrowsers.
            "ibazel_live_reload",
        ],
)


